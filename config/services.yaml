# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: en|nl|es|fr|de|hu|pl|it|pt_BR
    app.notifications.email_sender: anonymous@example.com
    doctrine.orm.entity_manager.class: Bolt\Doctrine\TranslatableEntityManager
    stof_doctrine_extensions.listener.translatable.class: Bolt\Event\Listener\PreTranslatableListener
    bolt.table_prefix: bolt_
    bolt.backend_url: /bolt

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            $locales: '%app_locales%'
            $emailSender: '%app.notifications.email_sender%'
            $projectDir: '%kernel.project_dir%'

    # makes App classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Exception,Kernel.php}'

    # makes Bolt classes in vendor/bolt/core/src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Bolt\:
        resource: '../vendor/bolt/core/src/*'
        exclude: '../vendor/bolt/core/src/{Entity,Exception,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Bolt\Controller\:
        resource: '../vendor/bolt/core/src/Controller'
        tags: ['controller.service_arguments']

    Bolt\Event\Listener\FieldDiscriminatorListener:
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata }

    Bolt\Event\Listener\ContentFillListener:
        tags:
            - { name: doctrine.event_listener, event: postLoad }

    Twig\Extension\StringLoaderExtension: ~
    Doctrine\ORM\Query\Expr: ~

    # Needed for SetContent from bolt/core
    Bolt\Storage\Query:
        calls:
            -
                method: addScope
                arguments: [ 'frontend', '@Bolt\Storage\FrontendQueryScope' ]
    Bolt\Storage\ContentQueryParser:
        calls:
            -
                method: addService
                arguments: [ 'select', '@Bolt\Storage\SelectQuery' ]

    Bolt\Doctrine\TablePrefix:
        arguments: [ "%bolt.table_prefix%" ]
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata, lazy: true }

    # menus
    Bolt\Menu\BackendMenuBuilder:
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createAdminMenu, alias: admin_menu } # The alias is what is used to retrieve the menu

    Bolt\Menu\BackendMenuBuilderInterface: '@Bolt\Menu\BackendMenuBuilder'
    Bolt\Menu\FrontendMenuBuilder: ~
    Bolt\Menu\FrontendMenuBuilderInterface: '@Bolt\Menu\FrontendMenuBuilder'

    # Override Symfony's error pages (so we can show custom 404's)
    Bolt\Controller\ExceptionController:
        public: true
        arguments:
            $debug: '%kernel.debug%'

    Bolt\Extension\RoutesLoader:
        tags: [routing.loader]
